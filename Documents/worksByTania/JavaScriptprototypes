//two ways to add properties in a class
// 1. in a constructor
//2. in a prototype
var Student = function(name) {
  this.obj.name = name;
  this.number = 22;
}

Student.prototype.obj = {
  name: 'default'
};

var tania = new Student("tania");
var kevin = new Student("Kevin");
tania.number = 23;
//here the instance share the same prototype members
console.log(kevin.obj.name); //logs kevin
console.log(tania.obj.name); //logs kevin
console.log(kevin.number); //logs 22
console.log(kevin.obj.name); //logs 23

//----------------------------------------

var Car = {
  name: "default",
  sayName: function() {
    console.log("this is a" + this.name + "car");
  },
  passenger: []
}

var mazda = Object.create(Car);
mazda.name = "mazda";

var nissan = Object.create(Car);
nissan.name = "Nissan";

//here the instance share the same prototype members

nissan.passenger.push();
//both has same passenger list
console.log(mazda.passenger);
console.log(nissan.passenger);

//-------------------------------------

var Car = {
  sayName: function() {
    console.log('this is a' + this.name);
  },
  //to have instance specific members, need to run this constructor
  constructor: function(name) {
    this.name = name || 'default';
    this.passenger = [];
    return this;
  }
}

//here since specific instance holds val bcz of this...we get different passenger list
var mazda = Object.create(Car).constructor('mazda');
mazda.passenger.push('Kevin');
console.log(mazda.name);
console.log(mazda.passenger);

var nissan = Object.create(Car).constructor('Nissan');
console.log(nissan.name);
console.log(nissan.passenger);

//----------using classical inheritance----------------------------

function Person() {
  this.food = [];
  this.num = 22;
}

function Girl() {
  //below statemet executes every statement in the Person with 'this' to be created mazda
  Person.apply(this, arguments);
}

//setting the Girl prototype

Girl.prototype = Object.create(Person.prototype);
//Girl.prototype = new Person(); -- can do but not a good approach
//here constructor is the built in memeber so pointing constructor of Girl to the //right one
Girl.prototype.constructor = Girl;

var mikayla = new Girl();
//this.food (inst spec to mikayla) comes from Person code with Person.apply(this.argumentd)
mikayla.food.push('avacado');

var tani = new Girl();
//whatever behaviour we add to prottype will reflect in inherited members
Person.prototype.run = function() {
  console.log("running")
};
mikayla.run();


console.log("mikayla's food " + mikayla.food);
console.log(mikayla.num);
console.log("tanis food " + tani.food.length);


//---------------classical inheritance -----------------

function Automobile(name, miles) {
  this.name = name || "default";
  this.miles = miles || 0;
}

Automobile.prototype.run = function(name) {
  console.log(this.name + " can run");
  console.log(this.name + " ran " + this.miles + " miles");
};

var auto = new Automobile("automobile");
console.log(auto.run());

//now create subclass
function Bus(name, miles) {
  Automobile.call(this, name, miles); //call super constructor
}

//subclass extends superclass

Bus.prototype = Object.create(Automobile.prototype);
Bus.prototype.constructor = Bus;

var greenbus = new Bus("greenbus", 2000);
console.log(greenbus.run());

console.log(greenbus instanceof Bus);
console.log(greenbus instanceof Automobile);


//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
var A = function(){
this.x = function(){
console.log('a');
 };
};

A.prototype.updateX = function(value){
this.x = function(){
console.log(value);
};
};

var a1 = new A();
var a2 = new A();
a1.x();
a2.x();
a1.updateX('u'); // updates only a1's instance
a1.x(); // alerts u 
a2.x(); // stil shows a 

//now
var B = function(){
};

B.prototype.x = function(){
console.log('b');
};

B.prototype.updateX = function(value){
B.prototype.x = function(){
console.log(value);
};
};

var b1 = new B();
var b2 = new B();
b1.x();
b2.x();
b1.updateX('z'); //updates both b1 and b2 since its held by prototype which is shared
b1.x();
b2.x();

//---------------------------------------------------------
//dynamically add properties

var o = {
propertyA : 'a',
propertyB : 'b'
};
o['propertyC'] = 'c';
console.log(o.propertyC); 

Object.defineProperty(o,'propertyD', {
																					value : 23,
                                          enumerable : true,
                                          writable : true,
                                          configurable : true
																				}
);
console.log(o.propertyD);
o.propertyD += 24;
console.log(o.propertyD);
var bval;
Object.defineProperty(o,"b",{get : function(){return bval;},
														 set : function(newVal){bval = newVal;},
                             enumerable : true,
                             configurable: true
                             });
o.b = 45;
//------------------------------------------------------------------------------

//to encapsulate the complexity of defineProperty, we can define a function

var defineProp = function(obj, key, value){
		var config = {
    		value : value,
        writable : true,
        configurable: true,
        enumerable : true
    };
    Object.defineProperty(obj, key, config);
};
var data = {};
defineProp(data, "property1", 33);
defineProp(data, "property2", 34);
console.log(data);

//------------------------------------------------------------------------------
//using es6 to dynamically add property

var person = "tania tressa";
var personId = "person_" + new Date().getTime();
var  personIndex = {
	[ personId ] : person
}

console.log(personIndex[personId]);
